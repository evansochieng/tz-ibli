server <- function(input, output, session) {
  
  login = FALSE
  USER <- reactiveValues(login = login)
  
  observe({ 
    if (USER$login == FALSE) {
      if (!is.null(input$login)) {
        if (input$login > 0) {
          Username <- isolate(input$userName)
          Password <- isolate(input$passwd)
          if(length(which(credentials$username_id==Username))==1) { 
            pasmatch  <- credentials["passod"][which(credentials$username_id==Username),]
            pasverify <- sodium::password_verify(pasmatch, Password)
            if(pasverify) {
              USER$login <- TRUE
            } else {
              shinyjs::toggle(id = "nomatch", anim = TRUE, time = 1, animType = "fade")
              shinyjs::delay(3000, shinyjs::toggle(id = "nomatch", anim = TRUE, time = 1, animType = "fade"))
            }
          } else {
            shinyjs::toggle(id = "nomatch", anim = TRUE, time = 1, animType = "fade")
            shinyjs::delay(3000, shinyjs::toggle(id = "nomatch", anim = TRUE, time = 1, animType = "fade"))
          }
        } 
      }
    }    
  })
  
  output$logoutbtn <- renderUI({
    req(USER$login)
    tags$li(a(icon("fa fa-sign-out"), "Logout", 
              href="javascript:window.location.reload(true)"),
            class = "dropdown", 
            style = "background-color: #eee !important; border: 0;
                    font-weight: bold; margin:5px; padding: 10px;")
  })
  
  output$sidebarpanel <- renderUI({
    if (USER$login == TRUE ){ 
      shinydashboard::sidebarMenu(
        # menu items
        shinydashboard::menuItem(text = "Home", tabName = "home", icon = icon("home")),
        shinydashboard::menuItem(text = "Payout Analysis", tabName = "payout", icon = icon("th"))
      )
    }
  })
  
  output$body <- renderUI({
    if (USER$login == TRUE ) {
      shinydashboard::tabItems(
        
        # First tab
        shinydashboard::tabItem(tabName ="home", class = "active",
                                fluidRow(
                                  shinydashboard::box(width = 12, 
                                                      h3("UAIs RAW NDVI VALUES", class = "text-center"),
                                                      br(),
                                                      DT::dataTableOutput('rawdata'))
                                )),
        
        # Second tab
        shinydashboard::tabItem(tabName = "payout",
                                fluidRow(
                                  shinydashboard::box(width = 12, tags$div(
                                    style = "text-align: center",
                                    h2("PRICING SUDAN IBLI PRODUCT")
                                  ))
                                ),
                                fluidRow(
                                  column(
                                    width=4,
                                    h3("Select Product Parameters"),
                                    selectInput(inputId = "uai", label = "UAI", 
                                                choices = c("Ajaj", "Murhal", "Alaf", "Eena", "Daoul"), 
                                                selected = "Ajaj"),
                                    selectInput(inputId = "triggerlevel", label = "Percentile Value (Trigger Level)", 
                                                choices = seq(0.1, 1, 0.05), selected = 0.2),
                                    selectInput(inputId = "exitoption", label = "Exit Level", 
                                                choices = c("Minimum", "1st Percentile", "5th Percentile"), selected = "Minimum"),
                                    selectInput(inputId = "maxpayout", label = "Maximum Payout", 
                                                choices = seq(0.5, 1, 0.1), selected = 1),
                                    tags$br(),
                                    tags$br(),
                                    tags$br(),
                                    tags$div(
                                      style = "border: 1px solid black !important;",
                                      strong(h4("Summary of Selected Parameters")),
                                      tableOutput("params")
                                    )
                                  ),
                                  column(
                                    width = 8,
                                    h3("Historical Payout Analysis"),
                                    #dataTableOutput('payouts'),
                                    plotly::plotlyOutput("payoutBarPlot"),
                                    tags$br(),
                                    strong(h4("Actual Historical Payouts Values")),
                                    DT::dataTableOutput("payouts"),
                                    tags$br(),
                                    shinydashboard::valueBoxOutput("premium", width = 20)
                                  )
                                )
        ))
      
    }
    else {
      loginpage
    }
  })
  
  # grab the inputs
  uai <- reactive({
    as.character(input$uai)
  })
  
  triggerlevel <- reactive({
    as.numeric(input$triggerlevel)
  })
  
  exitoption <- reactive({
    as.character(input$exitoption)
  })
  
  maxPayout <- reactive({
    as.numeric(input$maxpayout)
  })
  
  # call the function
  payoutFunc <- reactive({
    payouts <- payoutCalculator(ndviFile = ndviFile, uai = uai(),
                                triggerlevel = triggerlevel(), exitlevel = exitoption(), 
                                maxPayout = maxPayout())
    # return the payouts
    return(payouts)
  })
  
  # raw uai data
  output$rawdata <-  DT::renderDataTable({
    DT::datatable(rawNdvidata, options = list(scroller = TRUE,
                                              # scrollY = 400,
                                              scrollX = 500))
  })
  
  # bar graph of historical payouts
  output$payoutBarPlot <- plotly::renderPlotly({
    
    # plot bar graph of annual payouts
    histPayoutsBarGraph <- payoutFunc()$payouts |>
      plotly::plot_ly(x = ~Year, y = ~Payouts) |>
      plotly::add_bars() |>
      plotly::layout(
        title = "Historical Payouts",
        xaxis = list(title = "Years"),
        yaxis = list(title = "Payouts (%)")
      )
    histPayoutsBarGraph
    
  })
  
  # premium rate
  output$premium <- shinydashboard::renderValueBox({
    shinydashboard::valueBox(
      "Premium Rate",
      paste(payoutFunc()$premiumRate, '%', sep = ' '),
      icon = icon("hand-holding dollar", verify_fa = FALSE),
      width = 2
    )
  })
  
  # display payouts
  output$payouts <-  DT::renderDataTable({
    DT::datatable(payoutFunc()$claims, options = list(scroller = TRUE,
                                                      scrollX = 500))
  })
  
  # display table of params
  output$params <- renderTable(payoutFunc()$triEx, bordered = TRUE)
  
}